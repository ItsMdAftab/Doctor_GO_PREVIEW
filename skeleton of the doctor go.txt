import React, { useState,useRef,useEffect } from "react";
import "./App.css";
import chabotgif from './assets/gif/chatbotgif.gif';
import Splitting from "splitting";
import "splitting/dist/splitting.css";
export default function App() {
  const [input, setInput] = useState("");
  const [response, setResponse] = useState(null);
  const [loading, setLoading] = useState(false);
  const responseRef=useRef(null); 
  useEffect(() => {
    Splitting();
  }, []);

  const handleCheck = async () => {
    if (!input.trim()) return;

    setLoading(true);
    setResponse(null);

    try {
      const res = await fetch("http://localhost:5000/api/check", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ symptoms: input }),
      });

      const data = await res.json();
      setResponse(data);
       
    } catch (error) {
      console.error("Error:", error);
      setResponse({
        conditions: [
          {
            name: "Error",
            description: "Unable to connect to the backend.",
            extraSymptoms: [],
            specialist: "Try again later",
          },
        ],
      });
      
    } finally {
      setLoading(false);
    }
  };

  const handleReset = () => {
    setInput("");
    setResponse(null);
  };

  return (
    <div className="page-wrapper">
      
      <div className="image">
        <img src={chabotgif} alt="" />
      </div>
      
<h2 className="animated-heading">
  {"DoctorGo - Symptom Checker".split("").map((char, index) => (
    <span
      key={index}
      className="char"
      style={{ "--char-index": index }}
    >
      {char}
    </span>
  ))}
</h2>

    
      <div className="typewriter">
        <p >
            Enter your symptoms below to get  possible conditions & suggestions.
          </p>
      </div>
      <div className="app-container">
        
        <div className="card">
        
          

          <div className="input-group">
            <textarea
              placeholder="e.g. fever, headache, nausea"
              value={input}
              onChange={(e) => setInput(e.target.value)}
            ></textarea>

            <div className="button-group">
              <button onClick={handleCheck}>Check My Symptoms</button>
              <button onClick={handleReset} className="reset">Reset</button>
            </div>
          </div>

          {loading && <p>Analyzing symptoms...</p>}

          {response && (
            <div className="response">
              <h2>Possible Conditions:</h2>

              {response.conditions.map((cond, idx) => (
                <div
                  key={idx}
                  className={`condition-card ${cond.name === "Error" ? "error" : ""}`}
                >
                  <h3>{idx + 1}. {cond.name}</h3>
                  <p>{cond.description}</p>

                  {cond.extraSymptoms && cond.extraSymptoms.length > 0 && (
                    <>
                      <p><strong class="symptoms-heading">Associated Symptoms:</strong></p>
                      <ul >
                        {cond.extraSymptoms.map((sym, i) => (
                          <li className="li" key={i}>{sym}</li>
                        ))}
                      </ul>
                    </>
                  )}

                  <p><strong>Suggested Specialist:</strong> {cond.specialist}</p>
                  <hr />
                </div>
              ))}
            </div>
          )}
        </div>
        <div>

      <footer className="footer">
        <p>Â© 2025 DoctorGo. All rights reserved.</p>
      </footer>
    </div>
      </div>
      
    </div>
  );
}
///till here it is app.jsx 
body {
  margin: 0;
  font-family: Arial, sans-serif;
  background:#6BB9C1;
  color:white ;
}
.gmail
{
  margin-left: 10px;
}
.app-container {
  text-align: center;
  padding: 50px 20px;
  display: flex;
  justify-content: center;
  flex-direction: column;
  align-items: center;
  margin-left:250px;
  
}

.button-group {
  margin: 30px 0;
}
.btn,
button {
  padding: 10px 20px;
  font-size: 16px;
  margin: 0 10px;
  border-radius: 8px;
  cursor: pointer;
  border: none;
  font-weight: bold;
}

.btn-outline {
  background-color: white;
  color: #1b4332;
  border: 2px solid #1b4332;
}
.btn-filled {
  background-color: #2d6a4f;
  color: white;
}
button {
  background-color: #007bff;
  color: white;
  margin-top: 15px;
    transition: background-color 0.3s ease;

}
button:hover {
  background-color: #0056b3;
  
}
.card {
  width: 100%;
  max-width: 500px;
  padding: 2em;
  border-radius: 16px;
  animation: appear 1.0s ease-in-out forwards;

}

textarea {
  width: 70%;
  height: 80px;
  padding: 10px;
  font-size: 1rem;
  margin-top: 10px;
  border-radius: 8px;
  border: 1px solid #ccc;
  resize: vertical;
  box-shadow: 0 0 15px rgba(0,0,0,0.1);
  color :  black;
}

button {
  margin-top: 15px;
  padding: 10px 20px;
  background-color: #007bff;
  border: none;
  color: white;
  font-weight: bold;
  border-radius: 8px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}



.condition-card {
  background-color: #f9f9f9;
  padding: 15px;
  margin-bottom: 20px;
  width: 100;
  border-radius: 10px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
}
.animated-heading {
   font-family: 'Georgia', 'Times New Roman', serif;
  display: flex;
  color: green;
  justify-content: center;     
  align-items: center;         
  flex-wrap: wrap;             
  font-size: 2rem;
  font-weight: bold;
  text-align: center;
  
   
  margin-left:150px;         
}
.char {
  display: inline-block;
  opacity: 0;
  transform: translateY(20px);
  animation: char-transform 0.6s ease-out forwards;
  animation-delay: calc(var(--char-index) * 0.05s);
}

@keyframes char-transform {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

ul {
  list-style-type: disc; /* removes the bullets */
  padding-left: 20px;       /* removes the default left padding */
  margin: 0;             /* optional: removes margin */
}
li {
  margin-bottom: 5px;
  font-size: 16px;
  color: #444;
  text-align: left;      /* makes text align with bullet */
  display: list-item; 
   /* ensure bullet shows properly */
}
.typewriter
{
  text-align: center;
  display :flex;
  /*justify-content: center;*/

}
.typewriter p
{
  font-family: monospace;
  font-size: 1.5rem;
  overflow: hidden ;
  margin-left: 150px;
  white-space: nowrap;
  border-right: 1px solid;
  animation:typing 3s steps(22) forwards,
  blink 1s step-end infinite;
}
@keyframes typing
{
  from
  {
    width: 0;

  }
  to{
    width:100%

  }
}
@keyframes blink
{
  50%
  {
    border-color:transparent;
  }
}
.image
{
  
  height: 50px;
  width: 100%;
  margin-left: 70px;

}
@keyframes appear{
  from{
    opacity : 0; 
    scale : 0.5; 
  }
  to{
    opacity : 1; 
    scale : 1; 
  }
}
.response {
  margin-top: 30px;
  color: black ;
  animation : appear  linear;   
  animation-timeline: view();  
  animation-range: 0% cover 40% ; 
}
.symptoms-heading {
  display: block;
  margin-bottom: 8px;
  font-weight: bold;
    text-align: left; /* Make only this section left-aligned */

}//it is app.css 